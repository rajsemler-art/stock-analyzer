
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import time
import warnings
warnings.filterwarnings('ignore')

# Konfiguration
st.set_page_config(
    page_title="ü§ñ Professioneller Aktien-Analyse-Bot",
    page_icon="üìà",
    layout="wide"
)

# CSS Styling
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stock-card {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# Titel
st.markdown('<div class="main-header">ü§ñ Professioneller Aktien-Analyse-Bot</div>', unsafe_allow_html=True)

# Sidebar
st.sidebar.title("üìä Navigation")
app_mode = st.sidebar.selectbox(
    "W√§hle den Modus:",
    ["üè† Startseite", "üìà Einzelanalyse", "üîç Sektor-Scan", "‚ÑπÔ∏è Info"]
)

class WebStockAnalyzer:
    def quick_analysis(self, ticker):
        try:
            stock = yf.Ticker(ticker)
            info = stock.info
            
            if not info or 'currentPrice' not in info or not info['currentPrice']:
                return None
                
            current_price = info.get('currentPrice', 0)
            pe_ratio = info.get('trailingPE', 0) or 0
            debt_equity = info.get('debtToEquity', 0) or 0
            profit_margin = info.get('profitMargins', 0) or 0
            roe = info.get('returnOnEquity', 0) or 0
            
            # Value Score
            value_score = 0
            if 0 < pe_ratio < 15: value_score += 2
            if debt_equity < 1.0: value_score += 1
            if profit_margin > 0.1: value_score += 1
            if roe > 0.15: value_score += 1
            
            return {
                'ticker': ticker,
                'name': info.get('longName', ticker),
                'price': current_price,
                'pe_ratio': pe_ratio,
                'debt_equity': debt_equity,
                'profit_margin': profit_margin,
                'roe': roe,
                'value_score': value_score,
                'sector': info.get('sector', 'N/A'),
                'market_cap': info.get('marketCap', 0)
            }
        except Exception as e:
            return None

    def get_sector_stocks(self, sector):
        sectors = {
            'TECHNOLOGIE': ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA', 'ADBE', 'CRM', 'INTC'],
            'PHARMA': ['JNJ', 'PFE', 'ABT', 'TMO', 'BMY', 'LLY', 'MRK', 'ABBV', 'AMGN', 'GILD'],
            'FINANZEN': ['JPM', 'BAC', 'WFC', 'GS', 'MS', 'MA', 'V', 'AXP', 'PYPL', 'BLK'],
            'ENERGIE': ['XOM', 'CVX', 'COP', 'SLB', 'EOG', 'KMI', 'PSX', 'MPC', 'VLO', 'OXY']
        }
        return sectors.get(sector, [])

analyzer = WebStockAnalyzer()

if app_mode == "üè† Startseite":
    st.markdown("""
    ## Willkommen beim Professionellen Aktien-Analyse-Bot!
    
    **Funktionen:**
    - üìà **Einzelanalyse** - Detaillierte Analyse einzelner Aktien
    - üîç **Sektor-Scan** - Scannt ganze Branchen nach Value-Aktien
    - üí∞ **Value-Strategie** - Identifiziert unterbewertete Aktien
    
    **Verf√ºgbare Branchen:**
    - Technologie (AAPL, MSFT, TSLA, ...)
    - Pharma & Gesundheit (JNJ, PFE, ...)
    - Finanzen (JPM, BAC, ...)
    - Energie (XOM, CVX, ...)
    
    ‚ö†Ô∏è **Hinweis:** Keine Anlageberatung!
    """)

elif app_mode == "üìà Einzelanalyse":
    st.header("üìà Einzelanalyse")
    
    ticker = st.text_input("Aktien-Symbol:", "AAPL").upper()
    
    if st.button("Analyse starten", type="primary"):
        with st.spinner(f"Analysiere {ticker}..."):
            result = analyzer.quick_analysis(ticker)
            
            if result:
                st.success(f"‚úÖ Analyse f√ºr {ticker} abgeschlossen!")
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Preis", f"${result['price']:.2f}")
                with col2:
                    st.metric("KGV", f"{result['pe_ratio']:.1f}")
                with col3:
                    st.metric("D/E Ratio", f"{result['debt_equity']:.2f}")
                with col4:
                    st.metric("Value Score", f"{result['value_score']}/7")
                
                with st.expander("üìä Details"):
                    st.write(f"**Name:** {result['name']}")
                    st.write(f"**Branche:** {result['sector']}")
                    st.write(f"**Gewinnmarge:** {result['profit_margin']*100:.1f}%")
                    st.write(f"**Eigenkapitalrendite:** {result['roe']*100:.1f}%")
                    st.write(f"**Marktkapitalisierung:** ${result['market_cap']/1e9:.1f} Mrd")
                
                # Empfehlung
                score = result['value_score']
                if score >= 5:
                    st.success("üéØ **STARK KAUFEN** - Hervorragende Value-Eigenschaften")
                elif score >= 3:
                    st.warning("üü° **KAUFEN** - Gute Value-Eigenschaften")
                else:
                    st.error("üî¥ **VORSICHT** - Eingeschr√§nkte Value-Eigenschaften")
            else:
                st.error("‚ùå Keine Daten gefunden")

elif app_mode == "üîç Sektor-Scan":
    st.header("üîç Sektor-Scan")
    
    sector = st.selectbox("W√§hle Branche:", ["TECHNOLOGIE", "PHARMA", "FINANZEN", "ENERGIE"])
    
    if st.button("Sektor scannen", type="primary"):
        stocks = analyzer.get_sector_stocks(sector)
        results = []
        
        with st.spinner(f"Scanne {sector}..."):
            for ticker in stocks:
                result = analyzer.quick_analysis(ticker)
                if result:
                    results.append(result)
                time.sleep(0.1)  # Rate limiting
            
            if results:
                st.success(f"‚úÖ {len(results)} Aktien analysiert")
                
                # Sort by value score
                results.sort(key=lambda x: x['value_score'], reverse=True)
                
                for stock in results[:10]:  # Top 10
                    with st.container():
                        col1, col2, col3, col4 = st.columns([1, 2, 1, 1])
                        with col1:
                            st.write(f"**{stock['ticker']}**")
                        with col2:
                            st.write(stock['name'][:30] + "...")
                        with col3:
                            st.write(f"KGV: {stock['pe_ratio']:.1f}")
                        with col4:
                            score = stock['value_score']
                            if score >= 5:
                                st.success(f"{score}/7")
                            elif score >= 3:
                                st.warning(f"{score}/7")
                            else:
                                st.error(f"{score}/7")

else:
    st.header("‚ÑπÔ∏è Info")
    st.markdown("""
    **√úber diese App:**
    - Value-Aktien Identifikation
    - Fundamentale Analyse
    - Multi-Sektor Scanning
    
    **Entwickelt mit:** Streamlit, yFinance, Python
    
    ‚ö†Ô∏è **Wichtig:** Informationszwecke only!
    """)

st.markdown("---")
st.markdown("ü§ñ **Professioneller Aktien-Analyse-Bot** | Made with Streamlit")
